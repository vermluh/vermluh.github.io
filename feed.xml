<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Florian Simon</title>
    <description>...but it works on my machine...</description>
    <link>blog.verm-luh.de</link>
    <atom:link href="blog.verm-luh.de/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>BananaPi Homeserver</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#die-idee&quot;&gt;Die Idee&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ersteinrichtung&quot;&gt;Ersteinrichtung&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ausblick&quot;&gt;Ausblick&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;die-idee&quot;&gt;Die Idee&lt;/h2&gt;
&lt;p&gt;Nachdem mein BananaPi nun schon ein halbes Jahr hier bei mir herumlag und irgendwie keine so richtige Aufgabe erfüllte (man beachte die ansprechende Staubpatina), hatte ich kürzlich einen Einfall, wie er vielleicht doch noch etwas sinnvolles zu tun bekommen könnte.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;blog.verm-luh.de/images/bananapi_blue_sm.jpg&quot;&gt;&lt;img src=&quot;blog.verm-luh.de/images/bananapi_blue_sm.jpg&quot; alt=&quot;DustyBananaPi&quot; style=&quot;width: 100%;max-height: 100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wir haben hier bei uns eine kleine Zahl an lokalen Serverdiensten laufen, die sich munter auf verschiedene Rechner und virtuelle Maschinen verteilen. Auf Dauer wird es ein mühsames Unterfangen immer wieder einzelne Maschinen starten zu müssen, nur weil man gerade mal diesen oder jenen Serverdienst benötigt oder man etwas ausprobieren möchte.&lt;br /&gt;
Weiterhin gibt es auch Serverdienste, die immer erreichbar sein sollen. Da ist es ja naheliegend solche Dienste auf einen ḱleinen sparsamen Rechner wie den BananaPi auszulagern. Auf diese Weise ist es auch nicht so tragisch, wenn der mal eine Zeit lang vor sich hin läuft und gerade nicht verwendet wird.&lt;br /&gt;
Also reifte die Idee, diese genannten Serverdienste zu konsolidieren und gemeinsam auf einem immer erreichbaren System anzubieten.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Die Installation des Betriebssystems gestaltet sich recht einfach. Einfach das aktuelle Image von banaian.org &lt;a href=&quot;https://www.bananian.org/download&quot;&gt;herunterladen&lt;/a&gt; und auf eine SD-Karte aufspielen. Wer schonmal einen RaspberryPi in Betrieb genommen hat, der kennt den Vorgang. Ist recht ähnlich. Ansonsten gibt’s auf der Download-Seite auch nochmal eine Beschreibung, wie man das Image auf einer SD-Karte &lt;a href=&quot;https://www.bananian.org/download#installation&quot;&gt;installiert&lt;/a&gt;. Nach dem Einlegen der SD-Karte und dem Verbinden der Spannungsversorgung startet der BananaPi auch schon. Kurze Zeit später kann man sich dann das erste Mal per SSH mit dem Benutzer &lt;code&gt;root&lt;/code&gt; und dem Passwort &lt;code&gt;pi&lt;/code&gt; einloggen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bananian_first_login.jpg&quot; alt=&quot;Bananian first login&quot; title=&quot;Bananian first login&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ersteinrichtung&quot;&gt;Ersteinrichtung&lt;/h2&gt;

&lt;p&gt;Die Meldung, die bei der Anmeldung angezeigt wird zeigt schon den nächsten notwendigen Schritt auf. Das Skript &lt;code&gt;bananian-config&lt;/code&gt; führt einen durch die Einrichtung einiger Grundeinstellungen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;root&lt;/code&gt; Passwort&lt;/li&gt;
  &lt;li&gt;Zeitzone&lt;/li&gt;
  &lt;li&gt;den Hostnamen&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Weiterhin bietet das Skript die Möglichkeit das Dateisystem auf die gesamte zur Verfügung stehende Größe der SD-Karte zu expandieren. Diese sollte man in jedem Fall wahrnehmen.&lt;br /&gt;
Abschließend habe ich noch &lt;code&gt;bash&lt;/code&gt; als meine Standard-Shell eingerichtet&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;chsh -s /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dies hat keinen tieferen Sinn. Reine Gewohnheit &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;Initial existiert auf einer nackten Bananian Installation lediglich der Benutzer &lt;code&gt;root&lt;/code&gt;. Dies ist natürlich nicht schön. Daher wird noch schnell ein zusätzlicher Benutzer angelegt. Da lediglich der &lt;code&gt;root&lt;/code&gt; Benutzer angelegt ist, ist auch lein &lt;code&gt;sudo&lt;/code&gt; installiert. Dies ist schnell mittels&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get update
apt-get install sudo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;erledigt. Danach wird der neue Benutzer angelegt und zur Gruppe &lt;code&gt;sudo&lt;/code&gt; hinzugefügt, damit er auch mittels &lt;code&gt;sudo&lt;/code&gt;, Befehle mit &lt;code&gt;root&lt;/code&gt;-Privilegien ausführen kann.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;adduser &amp;lt;username&amp;gt;
adduser &amp;lt;username&amp;gt; sudo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;ausblick&quot;&gt;Ausblick&lt;/h2&gt;

&lt;p&gt;Ich werde versuchen die weiteren Schritte, die ich durchführe, um die Serverdienste auf dem BananaPi zu konsolidieren, hier im Blog zu dokumentieren und in diesem Post zu verlinken.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Always by my side to serve the master’s plan - Manowar – The power&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Feb 2016 00:00:00 +0100</pubDate>
        <link>blog.verm-luh.de/2016/02/08/BananaPi.html</link>
        <guid isPermaLink="true">blog.verm-luh.de/2016/02/08/BananaPi.html</guid>
      </item>
    
      <item>
        <title>MATE Lock Screen Background anpassen</title>
        <description>
&lt;p&gt;Hat man ein Wunsch-Wallpaper für seinen Desktop gefunden und eingerichtet, dann möchte man natürlich auch diesen Hintergrund auf dem Lock Screen sehen. Zumindest geht es mir so.&lt;br /&gt;
Wenn ich mir nun den Lock Screen von MATE ansehe, dann fällt dieser immer wieder auf einen Standrad Hintergrund zurück. Das ganze sieht dann so aus:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;blog.verm-luh.de/images/default_lockscreen.jpg&quot;&gt;&lt;img src=&quot;blog.verm-luh.de/images/default_lockscreen.jpg&quot; alt=&quot;Lock Screen mit Standard-Hintergrund&quot; style=&quot;width: 100%;max-height: 100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ein wenig Recherche brachte dann die Information, dass dieser verwendete Standard Hintergrund in &lt;code&gt;/usr/share/backgrounds/linuxmint&lt;/code&gt; definiert ist. Schaut man sich den Inhalt dieses Pfades an, ergibt sich folgendes Bild.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/default_background.jpg&quot; alt=&quot;Standard Hintergrund&quot; title=&quot;Standard Hintergrund&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aha. Der Standard-Hintergrund ist also lediglich ein Link auf ein andere Bilddatei. Wenn man diesen Link nun anpasst und auf sein gewünschtes Wallpaper verweisen lässt, dann müsste doch…&lt;br /&gt;
Nach einem schnellen  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo rm default_background.jpg
sudo ln -s /home/fez/Pictures/desktops/wallhaven-318296.png default_background.jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;zeigt sich in &lt;code&gt;/usr/share/backgrounds/linuxmint&lt;/code&gt; das folgende Bild.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/own_default_background.jpg&quot; alt=&quot;Eigener Standard Hintergrund&quot; title=&quot;Eigener Standard Hintergrund&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wenn alles klappt wie gewünscht, dann sollte der Lock Screen nun auch mit dem Wunsch-Wallpaper aufwarten. Und siehe da:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;blog.verm-luh.de/images/own_lockscreen.jpg&quot;&gt;&lt;img src=&quot;blog.verm-luh.de/images/own_lockscreen.jpg&quot; alt=&quot;Lock Screen mit Wunsch-Hintergrund&quot; style=&quot;width: 100%;max-height: 100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Es hat also alles geklappt. Der Lock Screen hat ab jetzt ebenfalls das Wunsch-Wallpaper.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Shiny.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Feb 2016 00:00:00 +0100</pubDate>
        <link>blog.verm-luh.de/2016/02/03/Lock-Screen-Background.html</link>
        <guid isPermaLink="true">blog.verm-luh.de/2016/02/03/Lock-Screen-Background.html</guid>
      </item>
    
      <item>
        <title>Installation von RubyMine unter Linux Mint 17.3</title>
        <description>&lt;p&gt;Eine kurze Anleitung zur Installation von RubyMine unter Linux Mint 17.3 “Rosa”. Der hier gezeigte Weg hat bei mir gut funktioniert. Es gibt aber sicherlich auch andere…&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#oracle-jdk-installieren&quot;&gt;Oracle JDK installieren&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#entfernen-aller-nicht---oracle-java-pakete&quot;&gt;Entfernen aller ‘Nicht - Oracle Java’ Pakete&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#aufrumen&quot;&gt;Aufräumen&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#hinzufgen-des-webupd8team-java-repository-und-installation-des-oracle-java-sdk&quot;&gt;Hinzufügen des webupd8team Java Repository und Installation des Oracle Java SDK&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rubymine-installieren&quot;&gt;RubyMine installieren&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#rubymine-archiv-herunterladen&quot;&gt;RubyMine Archiv herunterladen&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#erstellen-des-zielverzeichnisses-und-verschieben-des-archivs&quot;&gt;Erstellen des Zielverzeichnisses und Verschieben des Archivs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#archiv-entpacken&quot;&gt;Archiv entpacken&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#symlink-erstellen&quot;&gt;Symlink Erstellen&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#meneintrag-erstellen&quot;&gt;Menüeintrag erstellen&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fertig&quot;&gt;Fertig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;oracle-jdk-installieren&quot;&gt;Oracle JDK installieren&lt;/h2&gt;

&lt;h3 id=&quot;entfernen-aller-nicht---oracle-java-pakete&quot;&gt;Entfernen aller ‘Nicht - Oracle Java’ Pakete&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get update
sudo apt-get remove openjdk* icedtea* default-jre default-jdk gcj-jre gcj-jdk icedtea-&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;6..7&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;-plugin icedtea-plugin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;aufrumen&quot;&gt;Aufräumen&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get autoremove
sudo apt-get autoclean&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;hinzufgen-des-webupd8team-java-repository-und-installation-des-oracle-java-sdk&quot;&gt;Hinzufügen des webupd8team Java Repository und Installation des Oracle Java SDK&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html&quot;&gt;Install Oracle Java 8 in Ubuntu or Linux Mint via PPA repository&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;rubymine-installieren&quot;&gt;RubyMine installieren&lt;/h2&gt;

&lt;h3 id=&quot;rubymine-archiv-herunterladen&quot;&gt;RubyMine Archiv herunterladen&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/ruby/download/&quot;&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;erstellen-des-zielverzeichnisses-und-verschieben-des-archivs&quot;&gt;Erstellen des Zielverzeichnisses und Verschieben des Archivs&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo mkdir /opt/rubymines
sudo mv ~/Downloads/RubyMine-X.Y.Z.tar.gz /opt/rubymines&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;archiv-entpacken&quot;&gt;Archiv entpacken&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /opt/rubymines
sudo tar -xzf RubyMine-X.Y.Z.tar.gz
sudo rm RubyMine-X.Y.Z.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;symlink-erstellen&quot;&gt;Symlink Erstellen&lt;/h3&gt;
&lt;p&gt;Optional. Dies dient nur der Einfachheit.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo ln -nfs /opt/rubymines/RubyMine-8.0.3 /opt/rubymine&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;meneintrag-erstellen&quot;&gt;Menüeintrag erstellen&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo touch /usr/share/applications/jetbrains-rubymine.desktop
sudo nano /usr/share/applications/jetbrains-rubymine.desktop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Folgenden Inhalt einfügen:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Desktop Entry&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Application
&lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;RubyMine
&lt;span class=&quot;nv&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/rubymine/bin/RMlogo.svg
&lt;span class=&quot;nv&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/opt/rubymine/bin/rubymine.sh&amp;quot;&lt;/span&gt; %f
&lt;span class=&quot;nv&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Develop with pleasure!
&lt;span class=&quot;nv&quot;&gt;Categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Development&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;IDE&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Terminal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Speichern… Schließen…&lt;/p&gt;

&lt;h2 id=&quot;fertig&quot;&gt;Fertig&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/rubymine_menu.jpg&quot; alt=&quot;Menu entry&quot; title=&quot;Menu entry&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jan 2016 00:00:00 +0100</pubDate>
        <link>blog.verm-luh.de/2016/01/23/RubyMine-Installation-Rosa.html</link>
        <guid isPermaLink="true">blog.verm-luh.de/2016/01/23/RubyMine-Installation-Rosa.html</guid>
      </item>
    
      <item>
        <title>Remote Script Execution</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#putty&quot;&gt;PuTTY&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#plink&quot;&gt;Plink&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kürzlich war ich in der Situation, dass ich auf einem RaspberryPi ein Script ausführen musste, welches ein angeschlossenes Gerät initialisieren sollte. Soweit erstmal nichts außergewöhnliches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;per SSH anmelden&lt;/li&gt;
  &lt;li&gt;Script ausführen&lt;/li&gt;
  &lt;li&gt;fertig&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Da diese Initialisierung aber später in einen extern ablaufenden Prozess auf einer anderen Maschine eingebunden werden soll, musste ein Weg her, die Initialisierung aus einem Prozess auf einem anderen (Windows) System anzustoßen.  &lt;/p&gt;

&lt;h2 id=&quot;putty&quot;&gt;PuTTY&lt;/h2&gt;
&lt;p&gt;Bei den Themen Windows und SSH landet man natürlich zwangsläufig bei &lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/putty/&quot;&gt;PuTTY&lt;/a&gt;.&lt;br /&gt;
PuTTY bietet verschiedene Möglichkeiten auf einem entfernten System mit aktiviertem SSH Zugang Skripte (bzw. beliebige Kommandos) auszuführen. Um dies zu demonstrieren legt man zuerst ein Python Skript auf dem Zielsystem an. Folgender einfacher Inhalt soll für eine Demonstration ausreichen:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Initialization successful...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Die neu erstellte Datei noch ausführbar machen (&lt;code&gt;chmod +x ...&lt;/code&gt;) und schon kann es losgehen.&lt;br /&gt;
Mit dem Kommandozeilenparameter &lt;code&gt;m&lt;/code&gt; kann man PuTTY nun eine lokale Datei übergeben, deren Inhalt als Kommandos innerhalb der aufzubauenden Verbindung interpretiert werden sollen. Angenommen das oben gezeigte Skript liegt als &lt;code&gt;initialize.py&lt;/code&gt; im &lt;code&gt;home&lt;/code&gt; Verzeihnis des Benutzers, der per SSH am entfernten System angemeldet wird, dann würde die folgende Datei &lt;code&gt;remote_commands.txt&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./initialize.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;mittels folgender Kommandozeile (der Pfad für den Parameter &lt;code&gt;m&lt;/code&gt; muss natürlich an die jeweiligen Gegebenheiten angepasst werden)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;putty -ssh -l fez -pw &amp;lt;PASSWORD&amp;gt; -m d:/tools/putty/remote_commands.txt 192.168.178.36&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;an PuTTY übergeben, zu folgendem Ergebnis führen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/putty_command_file_result.jpg&quot; alt=&quot;Command file result&quot; title=&quot;Command file result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Die Ausführung eines Kommandos auf einem entfernten System funktioniert also soweit.&lt;br /&gt;
Allerdings hat diese Vorgehensweise auch Nachteile.&lt;br /&gt;
Zuerst ist es nicht sonderlich komfortabel alle auszuführenden Kommandos in speziellen Kommandodateien abzulegen, die dann als PuTTY Kommandozeilenparameter übergeben werden müssen. Bei einem oder zwei zu verwendenden Kommandos mag das noch gehen, aber irgendwann wird diese Herangehensweise unübersichtlich.&lt;br /&gt;
Der weitaus größere Nachteil ist aber der, dass man keine Möglichkeit hat den Exit-Code und somit die erfolgreiche Abarbeitung des oder der Kommandos zu überprüfen.  &lt;/p&gt;

&lt;h2 id=&quot;plink&quot;&gt;Plink&lt;/h2&gt;
&lt;p&gt;Auftritt &lt;strong&gt;Plink&lt;/strong&gt;.&lt;br /&gt;
Plink (PuTTY Link) stellt eine kommandozeilenbasierte Schnittstelle zum PuTTY Backend dar und ist von der Funktionalität ähnlich dem von UNIX Systemen bekannten &lt;code&gt;ssh&lt;/code&gt;.&lt;br /&gt;
Um die Funktionsweise von Plink zu demonstrieren modifiziert man zuerst das eben erstellte Python Skript auf dem Zielsystem  folgendermaßen:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Initialization failed...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dieses modifizierte Skrip soll eine fehlgeschlagene Initialisierung auf dem Zielsystem simulieren. Dazu wird der Exit-Code des Skripts auf einen Wert ungleich 0 geändert. Bei der bisherigen Vorgehensweise des Aufrufs über den &lt;code&gt;m&lt;/code&gt; Parameter und die Datei &lt;code&gt;remote_commands.txt&lt;/code&gt; hätte man ohne weiteres keine Möglichkeit die erfolgreiche Abarbeitung der gewünschten Kommandos automatisiert zu überprüfen.&lt;br /&gt;
Führt man das Skript aber nun über folgendes &lt;code&gt;plink&lt;/code&gt; Kommando aus&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;plink.exe -ssh -pw &amp;lt;PASSWORD&amp;gt; fez@192.168.178.36 ~/error42.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;führt dies zu folgender Ausgabe:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/plink_command_result.jpg&quot; alt=&quot;plink result&quot; title=&quot;plink result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Über das bekannte&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; %ERRORLEVEL%&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ist es nun auch möglich, den Rückgabewert der Kommandoausführung abzufragen und somit die erfolgreiche Abarbeitung automatisiert zu überprüfen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/plink_errorcode.jpg&quot; alt=&quot;plink errorcode&quot; title=&quot;plink errorcode&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Sep 2015 00:00:00 +0200</pubDate>
        <link>blog.verm-luh.de/2015/09/14/Remote-Script-Execution.html</link>
        <guid isPermaLink="true">blog.verm-luh.de/2015/09/14/Remote-Script-Execution.html</guid>
      </item>
    
      <item>
        <title>Tags in Jekyll</title>
        <description>&lt;p&gt;Dank der großartigen Vorarbeit von &lt;a href=&quot;http://charliepark.org&quot;&gt;Charlie Park&lt;/a&gt; in &lt;a href=&quot;http://charliepark.org/tags-in-jekyll/&quot;&gt;Tags In Jekyll&lt;/a&gt; und &lt;a href=&quot;http://charliepark.org/jekyll-with-plugins/&quot;&gt;Jekyll + Plugins + Github + You&lt;/a&gt; gibt’s hier im Blog nun auch Tags um Posts zu kategorisieren.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If I have seen further, it is by standing on the shoulders of giants. - Isaac Newton&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Aug 2015 00:00:00 +0200</pubDate>
        <link>blog.verm-luh.de/2015/08/20/Jekyll-Tags.html</link>
        <guid isPermaLink="true">blog.verm-luh.de/2015/08/20/Jekyll-Tags.html</guid>
      </item>
    
      <item>
        <title>Lift-off</title>
        <description>&lt;p&gt;So, nun ist er also da. Mein erster Blog Versuch. In erster Linie sollen die Posts der Dokumentation meiner mehr oder minder sinnvollen Versuche und Experimente in der weiten Welt der Softwareentwicklung dienen. Umso schöner ist es natürlich, wenn jemand etwas davon für sich selbst nützlich findet.  &lt;/p&gt;

&lt;p&gt;Ich habe mich bewusst für &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, genauer &lt;a href=&quot;https://github.com/barryclark/jekyll-now&quot;&gt;jekyll-now&lt;/a&gt; entschieden, da ich möglichst wenig Zeremonie um das Erstellen und Editieren der Blog Posts haben möchte.  &lt;/p&gt;

&lt;p&gt;Die Idee hinter &lt;a href=&quot;https://github.com/barryclark/jekyll-now&quot;&gt;jekyll-now&lt;/a&gt; lässt sich folgendermaßen kurz beschreiben (Zitat):  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is a static site generator that’s perfect for GitHub hosted blogs &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;(Jekyll repository)&lt;/a&gt;  &lt;/p&gt;

  &lt;p&gt;Jekyll Now makes it easier to create your Jekyll blog, by eliminating a lot of the up front setup.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Als Softwareentwickler gehöre ich ja eher zu den fauleren Zeitgenossen. Daher war vor allem der Teil  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…eliminating a lot of the up front setup…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;sehr interessant. &lt;img class=&quot;emoji&quot; title=&quot;:thumbsup:&quot; alt=&quot;:thumbsup:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f44d.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We have lift off…&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jul 2015 00:00:00 +0200</pubDate>
        <link>blog.verm-luh.de/2015/07/01/Lift-Off.html</link>
        <guid isPermaLink="true">blog.verm-luh.de/2015/07/01/Lift-Off.html</guid>
      </item>
    
  </channel>
</rss>